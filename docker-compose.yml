name: ScholarAI

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_FIREBASE_API_KEY: ${VITE_FIREBASE_API_KEY}
        VITE_FIREBASE_AUTH_DOMAIN: ${VITE_FIREBASE_AUTH_DOMAIN}
        VITE_FIREBASE_PROJECT_ID: ${VITE_FIREBASE_PROJECT_ID}
        VITE_FIREBASE_STORAGE_BUCKET: ${VITE_FIREBASE_STORAGE_BUCKET}
        VITE_FIREBASE_MESSAGING_SENDER_ID: ${VITE_FIREBASE_MESSAGING_SENDER_ID}
        VITE_FIREBASE_APP_ID: ${VITE_FIREBASE_APP_ID}
    ports:
      - "3000:80" # Map host port 3000 to the container's Nginx port 80
    depends_on:
      - api
    networks:
      - app-network
    restart: unless-stopped

  api:
    extends:
      file: docker-compose.base.yml
      service: backend-service
    ports:
      - '8000:8000'
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      kafka:
        condition: service_healthy
      postgresql:
        condition: service_healthy
      minio:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3

  research-worker:
    extends:
      file: docker-compose.base.yml
      service: backend-service
    command: python -m workers.research_worker
    depends_on:
      kafka:
        condition: service_healthy
      postgresql:
        condition: service_healthy
      minio:
        condition: service_started

  podcast-worker:
    extends:
      file: docker-compose.base.yml
      service: backend-service
    command: python -m workers.podcast_worker
    depends_on:
      kafka:
        condition: service_healthy
      postgresql:
        condition: service_healthy
      minio:
        condition: service_started

  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9093:9093'
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9092
      
      # Listeners for inter-container and external communication
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9094,CONTROLLER://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9094
      
      # NOTE: For connecting from your host machine (e.g., with a GUI client), use localhost:9093
      # The Bitnami image requires a more complex listener setup to expose both internally and externally.
      # For simplicity within the project, we'll focus on the internal listener.
      
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9094 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
  
  minio:
    image: 'minio/minio:latest'
    platform: linux/amd64
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    networks:
      - app-network
    volumes:
      - minio-data:/data
    
  postgresql:
    image: pgvector/pgvector:pg17
    restart: always
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 1s
      timeout: 5s
      retries: 10
    networks:
      - app-network
    
  proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      # Public-facing ports for web traffic
      - '80:80'
      - '443:443'
      # Admin UI port
      - '81:81'
    volumes:
      - ./data/nginx-proxy-manager/data:/data
      - ./data/nginx-proxy-manager/letsencrypt:/etc/letsencrypt
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  minio-data:
    driver: local
  pgdata:
    driver: local